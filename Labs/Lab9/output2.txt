mareFunctie - reserved word
bunaDimineataDragiBarladeni - reserved word
FunctionName -> bunaDimineataDragiBarladeni
( - separator
) - separator
: - separator
readDirectFromTheMysticalLandOfBarladia - reserved word
FunctionName -> readDirectFromTheMysticalLandOfBarladia
( - separator
n - identifier
) - separator
IdentifierList -> IDENTIFIER 
FunctionCallStatement -> FunctionName (IdentifierList)Statement -> FunctionCallStatement
i - identifier
= - operator
0 - int constant
NumberExpression -> INTCONSTANT 
catTimpNuAmDraci - reserved word
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
( - separator
i - identifier
< - operator
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
RelationalOperator -> <
n - identifier
) - separator
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
Condition -> Expression RelationalOperator Expression
: - separator
readDirectFromTheMysticalLandOfBarladia - reserved word
FunctionName -> readDirectFromTheMysticalLandOfBarladia
( - separator
x - identifier
) - separator
IdentifierList -> IDENTIFIER 
FunctionCallStatement -> FunctionName (IdentifierList)Statement -> FunctionCallStatement
numberCopy - identifier
= - operator
x - identifier
newNumber - identifier
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
= - operator
0 - int constant
NumberExpression -> INTCONSTANT 
catTimpNuAmDraci - reserved word
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
( - separator
numberCopy - identifier
> - operator
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
RelationalOperator -> >
0 - int constant
NumberExpression -> INTCONSTANT 
) - separator
Expression -> NumberExpression 
Condition -> Expression RelationalOperator Expression
: - separator
newNumber - identifier
= - operator
newNumber - identifier
* - operator
NumberExpression -> IDENTIFIER 
Arith -> * 
10 - int constant
NumberExpression -> INTCONSTANT 
lastDigit - identifier
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
= - operator
numberCopy - identifier
% - operator
NumberExpression -> IDENTIFIER 
ArithOp -> 
10 - int constant
NumberExpression -> INTCONSTANT 
newNumber - identifier
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
= - operator
newNumber - identifier
+ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> + 
lastDigit - identifier
numberCopy - identifier
NumberExpression -> IDENTIFIER 
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
= - operator
numberCopy - identifier
/ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> / 
10 - int constant
NumberExpression -> INTCONSTANT 
atatSAPutut - reserved word
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
Program -> Statement 
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
WhileStatement -> catTimpNuAmDraci ( Condition ) : Program atatSAPutut 
Statement -> WhileStatement
dacaSuntVaiMortiiMei - reserved word
( - separator
newNumber - identifier
== - operator
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
RelationalOperator -> ==
x - identifier
) - separator
NumberExpression -> IDENTIFIER 
Expression -> NumberExpression 
Condition -> Expression RelationalOperator Expression
: - separator
sumOfPalindroms - identifier
= - operator
sumOfPalindroms - identifier
+ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> + 
x - identifier
noOfPalindroms - identifier
NumberExpression -> IDENTIFIER 
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
= - operator
noOfPalindroms - identifier
+ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> + 
1 - int constant
NumberExpression -> INTCONSTANT 
sorryIJustWorkHere - reserved word
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
Program -> Statement 
Program -> Statement  Program
: - separator
sumOfNonPalindroms - identifier
= - operator
sumOfNonPalindroms - identifier
+ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> + 
x - identifier
atatSAPutut - reserved word
NumberExpression -> IDENTIFIER 
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
Program -> Statement 
IfStatement -> dacaSuntVaiMortiiMei ( Condition ) : Program sorryIJustWorkHere : Program atatSAPutut 
Statement -> IfStatement
atatSAPutut - reserved word
Program -> Statement 
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
WhileStatement -> catTimpNuAmDraci ( Condition ) : Program atatSAPutut 
Statement -> WhileStatement
average - identifier
= - operator
sumOfPalindroms - identifier
/ - operator
NumberExpression -> IDENTIFIER 
ArithOp -> / 
noOfPalindroms - identifier
printOffendingCommand - reserved word
NumberExpression -> IDENTIFIER 
NumberExpression -> NumberExpression ArithOp NumberExpression 
Expression -> NumberExpression 
AssignStatement -> IDENTIFIER = Expression 
Statement -> DeclareAssignStatement
FunctionName -> printOffendingCommand
( - separator
average - identifier
) - separator
IdentifierList -> IDENTIFIER 
FunctionCallStatement -> FunctionName (IdentifierList)Statement -> FunctionCallStatement
printOffendingCommand - reserved word
FunctionName -> printOffendingCommand
( - separator
sumOfNonPalindroms - identifier
) - separator
IdentifierList -> IDENTIFIER 
FunctionCallStatement -> FunctionName (IdentifierList)Statement -> FunctionCallStatement
atatSAPutut - reserved word
Program -> Statement 
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
Program -> Statement  Program
FunctionDeclarationStatement -> mareFunctie FunctionName () : Program atatSAPututStatement -> FunctionDeclarationStatement
Program -> Statement 
